/* tslint:disable */
/* eslint-disable */
/**
 * Museum
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    Exhibition,
    ExhibitionFromJSON,
    ExhibitionToJSON,
    Main,
    MainFromJSON,
    MainToJSON,
    Shop,
    ShopFromJSON,
    ShopToJSON,
} from '../models';

export interface ExhibitionRequest {
    date?: string;
}

export interface MainRequest {
    date?: string;
}

export interface ShopRequest {
    date?: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Returns exhibition to the caller
     */
    async exhibitionRaw(requestParameters: ExhibitionRequest): Promise<runtime.ApiResponse<Array<Exhibition>>> {
        const queryParameters: any = {};

        if (requestParameters.date !== undefined) {
            queryParameters['date'] = requestParameters.date;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/exhibition`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ExhibitionFromJSON));
    }

    /**
     * Returns exhibition to the caller
     */
    async exhibition(requestParameters: ExhibitionRequest): Promise<Array<Exhibition>> {
        const response = await this.exhibitionRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns main to the caller
     */
    async mainRaw(requestParameters: MainRequest): Promise<runtime.ApiResponse<Array<Main>>> {
        const queryParameters: any = {};

        if (requestParameters.date !== undefined) {
            queryParameters['date'] = requestParameters.date;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/main`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MainFromJSON));
    }

    /**
     * Returns main to the caller
     */
    async main(requestParameters: MainRequest): Promise<Array<Main>> {
        const response = await this.mainRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns shop to the caller
     */
    async shopRaw(requestParameters: ShopRequest): Promise<runtime.ApiResponse<Array<Shop>>> {
        const queryParameters: any = {};

        if (requestParameters.date !== undefined) {
            queryParameters['date'] = requestParameters.date;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/shop`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ShopFromJSON));
    }

    /**
     * Returns shop to the caller
     */
    async shop(requestParameters: ShopRequest): Promise<Array<Shop>> {
        const response = await this.shopRaw(requestParameters);
        return await response.value();
    }

}
